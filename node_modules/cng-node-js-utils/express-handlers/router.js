/**
  // cho phép khai báo đường dẫn POST hoặc GET theo cấu trúc để tự động tạo đường dẫn chức năng
  // như cấu trúc mẫu này:
  const functionPaths = {
    GET: {
        "/verify-token": [
            postHandler.getToken            // trả về req.token
            , serverHandler.verifyToken       // trả về req.user hoặc req.error
            , serverHandler.getResource       // trả kết quả
        ],
        "/js/*": [
            fileScriptHandler.getScriptFile
        ]
    },
    POST: {
        "/verify-user-device": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.getUserDevice    // trả về req.user hoặc req.error
        ],
        "/verify-proxy-token": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.verifyProxyToken  // trả về req.user hoặc req.error
            , serverHandler.getResource       // trả kết quả
        ]
    },
    PUT: {
        "/verify-user-device": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.getUserDevice    // trả về req.user hoặc req.error
        ],
        "/verify-proxy-token": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.verifyProxyToken  // trả về req.user hoặc req.error
            , serverHandler.getResource       // trả kết quả
        ]
    },
    DELETE: {
        "/verify-user-device": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.getUserDevice    // trả về req.user hoặc req.error
        ],
        "/verify-proxy-token": [
            postHandler.jsonProcess        // xử lý trả req.json_data
            , serverHandler.verifyProxyToken  // trả về req.user hoặc req.error
            , serverHandler.getResource       // trả kết quả
        ]
    },
}

Các hàm trả json thì chỉ cần khai

// sử dụng thư viện này để khai báo POST, GET theo yêu cầu
const { Router } =require("cng-node-js-utils");
module.exports = (new Router(functionPaths)).getExpressRouter();

Lưu Ý: Các hàm trả json thì chỉ xử lý và gán req.finalJson = chính đối tượng json cần trả kết quả
và gọi next(), thì phần route này sẽ trả kết quả dựa trên req.error hoặc req.finalJson cho người dùng api
Tiết kiệm thời gian viết code cho việc trả kết quả nhé, không cần quan tâm nó trả kết quả kiểu gì, 
vì viết API luôn là trả json
 */
const express = require("express");
const router = express.Router();

const checkErrorBeforeResource = require("./check-error-before-resource")
const sendFinnalJson = require("./send-final-json")

class Router {
    constructor(functionPaths, API) {
        for (let method in functionPaths) {
            if (functionPaths[method])
                for (let funcPath in functionPaths[method]) {
                    console.log("+++> FUNCTION:", method, `${API}${funcPath}`);
                    if (functionPaths[method][[funcPath]])
                        switch (method) {
                            // CREATE = INSERT/IMPORT
                            case "POST":
                                router.post(funcPath, ...functionPaths[method][[funcPath]], checkErrorBeforeResource, sendFinnalJson);
                                break;
                            // READ = SELECT
                            case "GET":
                                router.get(funcPath, ...functionPaths[method][[funcPath]], checkErrorBeforeResource, sendFinnalJson);
                                break;
                            // UPDATE
                            case "PUT":
                                router.put(funcPath, ...functionPaths[method][[funcPath]], checkErrorBeforeResource, sendFinnalJson);
                                break;
                            // DELETE
                            case "DELETE":
                                router.delete(funcPath, ...functionPaths[method][[funcPath]], checkErrorBeforeResource, sendFinnalJson);
                                break;
                            default:
                                break;
                        }
                }
        }
    }
    getExpressRouter() {
        return router;
    }
}

module.exports = Router;