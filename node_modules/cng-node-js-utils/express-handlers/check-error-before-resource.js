/**
 * Hàm này sẽ kiểm tra req.error mà có thì trả ngay kết quả, nếu không thì cho đi tiếp để xử lý trả kết quả
 * 200 OK – Trả về thành công cho những phương thức GET, PUT, PATCH hoặc DELETE.
201 Created – Trả về khi một Resouce vừa được tạo thành công.
204 No Content – Trả về khi Resource xoá thành công.
304 Not Modified – Client có thể sử dụng dữ liệu cache, resource server không đổi gì.
400 Bad Request – Request không hợp lệ
401 Unauthorized – Request cần có xác thực.
403 Forbidden – bị từ chối không cho phép.
404 Not Found – Không tìm thấy resource từ URI
405 Method Not Allowed – Phương thức không cho phép với user hiện tại.
410 Gone – Resource không còn tồn tại, Version cũ đã không còn hỗ trợ.
415 Unsupported Media Type – Không hỗ trợ kiểu Resource này.
422 Unprocessable Entity – Dữ liệu không được xác thực
429 Too Many Requests – Request bị từ chối do bị giới hạn

500 Internal Server Error - Lỗi do máy chủ liên hệ quản trị ứng dụng`
511 Network Authentication Required

 */

// hàm trả về trạng thái và nội dung message
const getMessageFromCode = (code) => {
    switch (code) {
        case 201:
            return {
                status: "OK",
                message: `Created – Resouce vừa được tạo thành công`
            }
        case 204:
            return {
                status: "OK",
                message: `No Content – Resource xoá thành công`
            }
        case 304:
            return {
                status: "NOK",
                message: `Not Modified – Client có thể sử dụng dữ liệu cache, resource server không đổi gì`
            }
        case 400:
            return {
                status: "NOK",
                message: `Bad Request – Request không hợp lệ`
            }
        case 401:
            return {
                status: "NOK",
                message: `Unauthorized – Request cần có xác thực`
            }
        case 403:
            return {
                status: "NOK",
                message: `Forbidden – bị từ chối không cho phép`
            }
        case 404:
            return {
                status: "NOK",
                message: `Not Found – Không tìm thấy resource từ URI`
            }
        case 405:
            return {
                status: "NOK",
                message: `Method Not Allowed – Phương thức không cho phép với user hiện tại`
            }
        case 410:
            return {
                status: "NOK",
                message: `Gone – Resource không còn tồn tại, Version cũ đã không còn hỗ trợ`
            }
        case 415:
            return {
                status: "NOK",
                message: `Unsupported Media Type – Không hỗ trợ kiểu Resource này`
            }
        case 422:
            return {
                status: "NOK",
                message: `Unprocessable Entity – Dữ liệu không được xác thực`
            }
        case 429:
            return {
                status: "NOK",
                message: `Too Many Requests – Request bị từ chối do bị giới hạn`
            }
        case 500:
            return {
                status: "NOK",
                message: `Internal Server Error – Lỗi do máy chủ liên hệ quản trị ứng dụng`
            }
        default:
            break;
    }

    return {
        status: "NOK",
        message: `HTTP response status code: ${code}`,
    }
}


module.exports = (req, res, next) => {
    
    if (req.error) {
        // ghi log truy cập bị lỗi cấm api chèn ở đây nếu có hàm req.logAccess được thiết lập
        if (typeof req.logAccess === "function") {
            try {
                // lưu log truy cập fail
                req.logAccess("FAIL", req);
            } catch { }
        }

        const error = req.error;
        // nếu có xác định được code thì trả về theo code và message biên dịch
        if (typeof error === "object" && error.code) {
            res.writeHead(error.code, { 'Content-Type': 'application/json; charset=utf-8' });
            res.end(JSON.stringify(
                {
                    ...getMessageFromCode(error.code),
                    error
                }
                , null, 2));
            return;
        }

        if (typeof error === "string") {
            res.writeHead(403, { 'Content-Type': 'application/json; charset=utf-8' });
            res.end(JSON.stringify(
                {
                    status: "NOK",
                    message: error,
                    error: { code: 403, error }
                }
                , null, 2));
            return;
        }

        res.writeHead(403, { 'Content-Type': 'application/json; charset=utf-8' });
        res.end(JSON.stringify(
            {
                status: "NOK"
                , message: "Lỗi không xác định!"
                , error
            }
            , null, 2));
        return;
    }
    next();
}