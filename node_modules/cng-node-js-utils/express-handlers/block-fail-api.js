module.exports = (failClient, failCfg, MAX_BLOCK_INTERVAL) => {
  return (req, res, next) => {
    let failAccess = failClient.get(req.clientIp);
    if (
      failAccess &&
      failAccess.countInteval > failCfg.maxCountFail4Block &&
      (!failAccess.blockTime ||
        Date.now() - failAccess.blockTime < MAX_BLOCK_INTERVAL)
    ) {
      failClient.set(req.clientIp, {
        ...failAccess,
        blockTime: Date.now(),
      });

      // ghi log truy cập bị lỗi cấm api chèn ở đây nếu có hàm req.logAccess được thiết lập
      if (typeof req.logAccess === "function") {
        try {
          // lưu log truy cập fail
          req.logAccess("BLOCK", req);
        } catch {}
      }

      // trả luôn lỗi, không cho đi tiếp
      res.writeHead(403, {
        "Content-Type": "application/json; charset=utf-8",
      });
      res.end(
        JSON.stringify(
          {
            status: "NOK",
            message:
              "Nghi ngờ dò quét, hệ thống tự block bạn. Đợi thời gian sau truy cập lại nhé",
            error: "ERROR block because error url link.",
          },
          null,
          2
        )
      );
      return;
    }
    next();
  };
};
