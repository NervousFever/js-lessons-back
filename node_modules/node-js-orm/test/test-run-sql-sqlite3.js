// tên csdl
const dbName = "test-sqlite3-run-sql";

// khai báo đối tượng tạo kết nối csdl kiểu pool
const { dbConnectionPool, DynamicModel } = require("../index");

// đường dẫn ghi cơ sở dữ liệu sqlite3 độc lập tách khỏi dự án
const path = require("path");
const ROOT_SQLITE_DB = `${__dirname
    .split(path.sep)
    .slice(0, __dirname.split(path.sep).length - 3)
    .join(path.sep)}/DB-SQLITE3-C3`;


// định nghĩa kết nối csdl
const db = dbConnectionPool(
    "sqlite3",
    true, // tự đông tạo id
    `${ROOT_SQLITE_DB}/${dbName}.db`,
    null, // sqlite không cần server
    null, // không cần option
    true // cần debug
);


// đợi csdl kết nối được
db.waitingConnected()
    .then(async (ok) => {
        console.log("OK", ok);
        let xCreateTable = await createTable()
            .catch(err => {
                console.log("Lỗi chạy tạo bảng:", err);
            });

        console.log("Kết quả tạo bảng", xCreateTable);

        // CRUD function chỉ sử dụng runSql thôi
        // runSqlFunction();
        let yCreateTable = await runSqlAny("delete from users where id=1")
            .catch(err => {
                console.log("Lỗi chạy delete bảng:", err);
            });

        console.log("Kết quả delete bảng", yCreateTable);


        let yyCreateTable = await runSqlAny(`insert into users (id,username ) values (1,'cuong.dq')`)
            .catch(err => {
                console.log("Lỗi chạy insert bảng:", err);
            });

        console.log("Kết quả insert bảng", yyCreateTable);


        let yyyCreateTable = await runSqlAny(
            `update users 
                set fullname='xxx'
             where id = 1
        `)
            .catch(err => {
                console.log("Lỗi chạy update bảng:", err);
            });

        console.log("Kết quả update bảng", yyyCreateTable);


        let zCreateTable = await runSqlAny("select * from users")
            .catch(err => {
                console.log("Lỗi chạy select bảng:", err);
            });

        console.log("Kết quả select bảng", zCreateTable);


    })
    .catch(err => {
        console.log("Loi", err);
    });


// tạo bảng là ok
function createTable() {
    // định nghĩa một cấu trúc bảng gồm các trường thông tin
    let jsonTableStructure = {
        id: {
            type: "INTEGER",
            notNull: false,
            primaryKey: true,
            autoIncrement: true,
            isUnique: true,
            length: 100
        },
        username: {
            type: "STRING",
            notNull: false,
            isUnique: true,
            length: 100
        },
        nickname: {
            type: "STRING",
            notNull: false,
            length: 5
        },
        fullname: { type: "STRING" },
        role: {
            type: "NUMBER",
            defaultValue: 1
        },
        birth_date: "DATE",
        log_time: { type: "TIMESTAMP" },
        status: { type: "BOOLEAN" }
    };

    // khai báo định nghĩa một mô hình động có tên là users 
    // có tên bảng trùng với tên mô hình
    let users = new DynamicModel(
        db, 'users',
        jsonTableStructure
    );

    return users.sync();

};

function runSqlFunction() {

    // định nghĩa một cấu trúc bảng gồm các trường thông tin như lúc tạo bảng
    let jsonTableStructure = {
        id: {
            type: "INTEGER",
            notNull: false,
            primaryKey: true,
            autoIncrement: true,
            isUnique: true,
            length: 100
        },
        username: {
            type: "STRING",
            notNull: false,
            isUnique: true,
            length: 100
        },
        nickname: {
            type: "STRING",
            notNull: false,
            length: 5
        },
        fullname: { type: "STRING" },
        role: {
            type: "NUMBER",
            defaultValue: 1
        },
        birth_date: "DATE",
        log_time: { type: "TIMESTAMP" },
        status: { type: "BOOLEAN" }
    };

    // khai báo định nghĩa một mô hình động có tên là users 
    // có tên bảng trùng với tên mô hình
    let users = new DynamicModel(
        db, 'users',
        jsonTableStructure
    );

    users.insertOneRecord({
        username: "cuongd.dq",
        nickname: "123",
        role: "99",
        birth_date: Date.now(),
        log_time: Date.now(),
        status: "-1",
    })
        .then(data => {
            console.log("Kết quả chèn dữ liệu", data)
        })
        .catch(err => {
            console.log("Lỗi insert", err);
        });

};


// chạy lệnh runSql theo kiểu select xem
function runSqlAny(sql) {

    let dbDao = db.getDbInstance();

    if (dbDao.runAnySql) {
        return dbDao.runAnySql(sql);
    }

    return Promise.reject("dbDao were not supported!");



};